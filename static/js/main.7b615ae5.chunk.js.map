{"version":3,"sources":["images/teacup.jpg","images/donuts.jpg","images/sanramon.jpg","images/grad.jpg","images/couple.png","images/nearme.jpg","images/equestrians.jpg","images/boys.jpg","images/superman2.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","solutions","images","sanramon","donuts","nearme","teacup","couple","grad","superman2","boys","equestrians","state","questionNumber","otp","hasErrored","confirmInput","toUpperCase","console","log","setState","prev","handleChange","this","heading","backgroundImage","style","riddles","length","numInputs","className","inputStyle","value","onChange","separator","errorStyle","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,sWCmG5BC,E,4MAlFbC,UAAY,CAAC,MAAO,QAAS,SAAU,QAAS,QAAS,MAAO,MAAO,U,EACvEC,OAAS,CAACC,IAAUC,IAAQC,IAAQC,IAAQC,IAAQC,IAAMC,IAAWC,IAAMC,K,EAE3EC,MAAQ,CACNC,eAAgB,EAChBC,IAAK,GACLC,YAAY,G,EAGdC,aAAe,WAAO,IAAD,EACa,EAAKJ,MAA7BC,EADW,EACXA,eAAgBC,EADL,EACKA,IACpB,EAAKb,UAAUY,KAAoBC,EAAIG,eACzCC,QAAQC,IAAI,WACZ,EAAKC,UAAS,SAACC,GACb,MAAO,CACLR,eAAgBQ,EAAKR,eAAiB,EACtCC,IAAK,GACLC,YAAY,QAIhBG,QAAQC,IAAI,SACZ,EAAKC,UAAS,SAACC,GACb,MAAO,CACLN,YAAY,Q,EAMpBO,aAAe,SAACR,GAAD,OAAS,EAAKM,SAAS,CAAEN,MAAKC,YAAY,K,uDAE/C,IAAD,EACqCQ,KAAKX,MAAzCC,EADD,EACCA,eAAgBC,EADjB,EACiBA,IAAKC,EADtB,EACsBA,WACzBS,EAAU,KAERC,EAAkBF,KAAKrB,OAAOW,GAE9Ba,EAAQ,CACVD,gBAAgB,OAAD,OAASA,EAAT,MAEfE,EAAU,KAEd,GAAId,EAAiBU,KAAKtB,UAAU2B,OAAQ,CAC1C,IAAMC,EAAYN,KAAKtB,UAAUY,GAAgBe,OAEjDJ,EAAO,mBAAeX,EAAiB,GACvCc,EACE,yBAAKG,UAAU,QACb,wBAAIA,UAAU,WAAWN,EAAzB,KACA,yBAAKM,UAAU,OACb,kBAAC,IAAD,CACEC,WAAW,aACXC,MAAOlB,EACPmB,SAAUV,KAAKD,aACfO,UAAWA,EACXK,UAAW,mCACXnB,WAAYA,EACZoB,WAAW,WAGf,4BAAQL,UAAU,SAASM,QAASb,KAAKP,cACvC,kDAKNQ,EAAO,cACPG,EACE,yBAAKG,UAAU,YACb,wBAAIA,UAAU,WAAWN,EAAzB,MAKN,OACE,yBAAKM,UAAU,MAAMJ,MAAOA,GACzBC,O,GA/ESU,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.7b615ae5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/teacup.46ed9d37.jpg\";","module.exports = __webpack_public_path__ + \"static/media/donuts.e3812d36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sanramon.5f833a94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/grad.134d5495.jpg\";","module.exports = __webpack_public_path__ + \"static/media/couple.ba6b3c7a.png\";","module.exports = __webpack_public_path__ + \"static/media/nearme.ffb12d1d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/equestrians.9b4f889e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/boys.bdc5462e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/superman2.00bfd74d.jpg\";","import React from \"react\";\nimport \"./App.css\";\nimport OtpInput from \"react-otp-input\";\nimport teacup from \"./images/teacup.jpg\";\nimport donuts from \"./images/donuts.jpg\";\n\nimport sanramon from \"./images/sanramon.jpg\";\nimport grad from \"./images/grad.jpg\";\nimport couple from \"./images/couple.png\";\nimport nearme from \"./images/nearme.jpg\";\nimport equestrians from \"./images/equestrians.jpg\";\nimport boys from \"./images/boys.jpg\";\nimport superman2 from \"./images/superman2.jpg\";\n\n\nclass App extends React.Component {\n\n  solutions = [\"456\", \"IRON1\", \"CUCKED\", \"LIGMA\", \"TROCK\", \"235\", \"511\", \"smelly\"];\n  images = [sanramon, donuts, nearme, teacup, couple, grad, superman2, boys, equestrians];\n\n  state = {\n    questionNumber: 0,\n    otp: \"\",\n    hasErrored: false,\n  };\n\n  confirmInput = () => {\n    const { questionNumber, otp } = this.state;\n    if (this.solutions[questionNumber] === otp.toUpperCase()) {\n      console.log(\"correct\");\n      this.setState((prev) => {\n        return {\n          questionNumber: prev.questionNumber + 1,\n          otp: \"\",\n          hasErrored: false,\n        };\n      });\n    } else {\n      console.log(\"wrong\");\n      this.setState((prev) => {\n        return {\n          hasErrored: true,\n        };\n      });\n    }\n  };\n\n  handleChange = (otp) => this.setState({ otp, hasErrored: false });\n\n  render() {\n    const { questionNumber, otp, hasErrored } = this.state;\n    let heading = null;\n\n    const backgroundImage = this.images[questionNumber];\n\n    const style = {\n        backgroundImage: `url(${backgroundImage})`,\n      };\n    let riddles = null;\n\n    if (questionNumber < this.solutions.length) {\n      const numInputs = this.solutions[questionNumber].length;\n\n      heading = `Riddle # ${questionNumber + 1}`;\n      riddles = (\n        <div className=\"card\">\n          <h1 className=\"heading\">{heading} </h1>\n          <div className=\"otp\">\n            <OtpInput\n              inputStyle=\"inputStyle\"\n              value={otp}\n              onChange={this.handleChange}\n              numInputs={numInputs}\n              separator={<span>-</span>}\n              hasErrored={hasErrored}\n              errorStyle=\"error\"\n            />\n          </div>\n          <button className=\"button\" onClick={this.confirmInput}>\n            <span> Submit! </span>\n          </button>\n        </div>\n      );\n    } else {\n      heading = `You did it!`;\n      riddles = (\n        <div className=\"card_two\">\n          <h1 className=\"heading\">{heading} </h1>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"app\" style={style}>\n        {riddles}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}